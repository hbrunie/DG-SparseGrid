% main code for LDG equation
%==================================================
%  df/dt + d/dx(x(1-x^2)f) = source
% A = (x(1-x^2)f,dw/dx) - <x(1-x^2)\hat{f},w>
% F{n+1}=F{n}+dt*A*F{n}+dt*S
% Flux is:: {funcCoef*u}+abs(funcCoef)*(1-alpha)[u]
% Note: 
%   alpha = 0:: upwind  flux
%   alpha = 1:: central flux
% Parameters:
%   alpha:: flux choice as aobve
%   PlotType:	1--discontinous plot
%               2--continuous plot
%   Deg, Lev, CFL
%==================================================
clear all
close all
% clc

% Test
sigma = 0.1;
% f0 = @(x)( exp(-(x-0.36).^2/sigma^2) );
f0 = @(x)( exp(-(x-0.36).^2/sigma^2)+exp(-(x+0.36).^2/sigma^2) );

phi = @(x,t)( x.*exp(-t)./sqrt(1+(exp(-2*t)-1).*x.^2) );
exactf = @(x,t)(...
    (phi(x,t).*(1-phi(x,t).^2))./(x.*(1-x.^2)).*f0(phi(x,t)) ...
    );
funcCoef = @(x)(x.*(1-x.^2));

format short e
addpath(genpath(pwd))


Lev = 5;
Deg = 2;
num_plot = 3;
EndTime = 6;
PlotType = 1;
AdapTest = 1;

alpha = 0;

% Define domain = [Lstart,Lend] and Lmax = Lend-Lstart
Lstart = -1;
Lend = 1;
Lmax = Lend-Lstart;



%--Quadrature
quad_num=10;
%---------------

% compute the trace values
p_1 = legendre(-1,Deg);
p_2 = legendre(1,Deg);

[quad_x,quad_w]=lgwt(quad_num,-1,1);
p_val = legendre(quad_x,Deg);
Dp_val = dlegendre(quad_x,Deg);

%---------------------------
% Jacobi of variable x and v
% Define Matrices
%---------------------------
if AdapTest == 0
tol_cel_num=2^(Lev);h=Lmax/tol_cel_num;
dof_1D=Deg*tol_cel_num;

CFL = 0.01;



if Deg < 4
    dt = CFL*h^((Deg-1)/3)/2;
else
    dt = CFL*h^((Deg)/3);
end



maxT = ceil(EndTime/dt)

M_Adv = sparse(dof_1D,dof_1D);
S = sparse(dof_1D,1);
f0 = sparse(dof_1D,1);

b = sparse(dof_1D,1);
fexact = sparse(dof_1D,1);

% generate 1D matrix for DG
for L=0:tol_cel_num-1
    
    %---------------------------------------------
    % (funcCoef*q,d/dx p)
    %---------------------------------------------
    x0 = Lstart+L*h;
    x1 = x0+h;
    xi = quad_x*(x1-x0)/2+(x1+x0)/2;
    xmid= (x0+x1)/2;
    
    val=1/h*[Dp_val'*(quad_w.*funcCoef(xi).*p_val)];
    
    c = Deg*L+1:Deg*(L+1);
    
    M_Adv = M_Adv + sparse(c'*ones(1,Deg),ones(Deg,1)*c,val,dof_1D,dof_1D);
    
    
    val = sqrt(h)/2*[p_val'*(quad_w.*exactf(xi,0))];
    fexact(c)=fexact(c)+val;
    
    
    %----------------------------------------------
    % -<funcCoef*{q},p>
    %----------------------------------------------
    if (L >= 1) && (L < tol_cel_num-1)
    val_flux = [...
        p_1'*(funcCoef(x0)+abs(funcCoef(x0))*(1-alpha))*p_2;...
        p_1'*(funcCoef(x0)-abs(funcCoef(x0))*(1-alpha))*p_1;...
       -p_2'*(funcCoef(x1)+abs(funcCoef(x1))*(1-alpha))*p_2;...
       -p_2'*(funcCoef(x1)-abs(funcCoef(x1))*(1-alpha))*p_1;...
        ]/2/h;
    IndexV = [c'*ones(1,Deg);c'*ones(1,Deg);c'*ones(1,Deg);c'*ones(1,Deg)];
    IndexU = [ones(Deg,1)*(c-Deg);ones(Deg,1)*(c);ones(Deg,1)*(c);ones(Deg,1)*(c+Deg) ];
    elseif L == 0
     val_flux = [...
        p_1'*(funcCoef(x0)-abs(funcCoef(x0))*(1-alpha))*p_1;...
       -p_2'*(funcCoef(x1)+abs(funcCoef(x1))*(1-alpha))*p_2;...
       -p_2'*(funcCoef(x1)-abs(funcCoef(x1))*(1-alpha))*p_1;...
            ]*0.5/h;
        
        IndexV = [c'*ones(1,Deg);c'*ones(1,Deg);c'*ones(1,Deg)];
        IndexU = [ones(Deg,1)*(c);...
            ones(Deg,1)*(c);...
            ones(Deg,1)*(c+Deg) ];
        val_L = -p_1'*(funcCoef(x0)+abs(funcCoef(x0))*(1-alpha))*0;
    elseif L == tol_cel_num-1
      val_flux = [...
        p_1'*(funcCoef(x0)+abs(funcCoef(x0))*(1-alpha))*p_2;...
        p_1'*(funcCoef(x0)-abs(funcCoef(x0))*(1-alpha))*p_1;...
       -p_2'*(funcCoef(x1)+abs(funcCoef(x1))*(1-alpha))*p_2;...
            ]*0.5/h;
        
        IndexV = [c'*ones(1,Deg);c'*ones(1,Deg);c'*ones(1,Deg)];
        IndexU = [ones(Deg,1)*(c-Deg); ...
            ones(Deg,1)*(c);...
            ones(Deg,1)*(c)];
        val_R = p_2'*(funcCoef(x1)-abs(funcCoef(x1))*(1-alpha))*0;
    end
    M_Adv = M_Adv + sparse(IndexV,IndexU,val_flux,dof_1D,dof_1D);
 
    val = sqrt(h)/2*[p_val'*(quad_w.*exactf(xi,0))];
    f0(c) = val;
    
    
end




[quad_x,quad_w]=lgwt(num_plot,-1,1);

p_val = legendre(quad_x,Deg);
for L=0:tol_cel_num-1
    %---------------------------------------------
    % Generate the coefficients for DG bases
    %---------------------------------------------
    
    Iu = [Deg*L+1:Deg*(L+1)];
    
    Iv = [num_plot*L+1:num_plot*(L+1)];
    
    x0 = Lstart+L*h;
    x1 = x0+h;
    
    if PlotType == 1
        xi = [x0,quad_x(2:end-1)'*(x1-x0)/2+(x1+x0)/2,x1];
    elseif PlotType == 0
        xi = quad_x*(x1-x0)/2+(x1+x0)/2;
    end    
    
    
    Meval(Iv,Iu)=sqrt(1/h)*p_val;
    x_node(Iv,1)=xi;
    
end

Mat = M_Adv;

b = S;



% checked of projection
plot(x_node,Meval*f0,'r-o',x_node,exactf(x_node,0),'b--','LineWidth',2)
legend({'solution f','flux x(1-x^2)f'})
title(['time at ',num2str(0)])

for i = 1:size(IHash,2)
    l1 = IHash{i};
    Id(Deg*(i-1)+[1:Deg]) = Deg*(l1(3)-1)+[1:Deg];
end

num_In = 2^5;%2^(10-Lev);
plot_start = 2^(10-Lev)/2;
MMeval = Meval(plot_start:num_In:end,Id);
xx_node = x_node(plot_start:num_In:end);

figure;
plot(xx_node,MMeval*f0(Id),'r-o',xx_node,exactf(xx_node,0),'b--','LineWidth',2)
legend({'solution f','flux x(1-x^2)f'})
title(['time at ',num2str(0)])




[quad_x,quad_w]=lgwt(num_plot,-1,1);
total_particle = 0;
ffval = Meval*f0;
L2_stability = 0;
for i = 1:num_plot
    total_particle =  total_particle+quad_w(i)*h/2*sum(ffval(i:num_plot:end));
    L2_stability = L2_stability+quad_w(i)*h/2*sum(ffval(i:num_plot:end).^2);
end
[total_particle L2_stability]

tp(1) = total_particle;
Lp(1) = L2_stability;

figure
for t = 1:maxT
    %     t
    time = t*dt;
    
    % if source is time-independent
    f1 = f0 + dt*( Mat*f0+b );
    f2 = 3/4*f0+1/4*f1+1/4*dt*(Mat*f1+b);
    fval = 1/3*f0+2/3*f2+2/3*dt*(Mat*f2+b);
    % if source is time-dependent
%     f1 = f0 + dt*( Mat*f0+b*exp(time-dt) );
%     f2 = 3/4*f0+1/4*f1+1/4*dt*(Mat*f1+b*exp(time));
%     fval = 1/3*f0+2/3*f2+2/3*dt*(Mat*f2+b*exp(time-dt/2));
    
    f0 = fval;
    
    plot(x_node,Meval*f0,'r-o',x_node,x_node.*(1-x_node.^2).*Meval*(f0),'b-<')
    legend({'solution f','flux x(1-x^2)f'})
    title(['time at ',num2str(time)])
    pause (0.1)
    
    total_particle = 0;
    L2_stability = 0;
    ffval = Meval*f0;
    for i = 1:num_plot
        
        total_particle =  total_particle+...
            quad_w(i)*h/2*sum(ffval(i:num_plot:end));
        L2_stability = L2_stability+quad_w(i)*h/2*sum(ffval(i:num_plot:end).^2);
    end
    tp(t+1) = total_particle;
    Lp(t+1) = L2_stability;
    
    % saving data
    if abs(time-0.5)<=dt || abs(time-1)<=dt || abs(time-1.5)<=dt ...
       || abs(time-2)<=dt || abs(time-2.5)<=dt || abs(time-3)<=dt ...
       || abs(time-3.5)<=dt || abs(time-4)<=dt || abs(time-4.5)<=dt ...
       || abs(time-5)<=dt || abs(time-5.5)<=dt || abs(time-6)<=dt 
       
        save(['Damp_ALPHA',num2str(alpha),'_Deg',num2str(Deg),'_Lev',num2str(Lev),'_End',num2str(time),'.mat'])
    end
end





elseif AdapTest == 1
    Lev_old = Lev;
    Lev = 10; 

    if Deg < 4
    dt = CFL*(Lmax/2^Lev_old)^((Deg-1)/3)/2;
    else
    dt = CFL*(Lmax/2^Lev_old)^((Deg)/3);
    end
    
    if AdapTest == 1
    % convect matrix to MWDG
    FMWT = OperatorTwoScale(Deg,2^Lev);
    Mat = FMWT*Mat*FMWT';
    b = FMWT*b;
    Meval = Meval*FMWT';

    f0 = FMWT*f0;
    
    save(['Mat_Lev',num2str(Lev),'_Deg',num2str(Deg),'.mat']);
    
    Lev = Lev_old;
    [Hash,IHash,FineIndex] = HashTable1D(Lev);
    DoFs = Deg*2^Lev;

    Mat_tmp = Mat(1:DoFs,1:DoFs);

end
    
end

% figure;plot(x,f_loc'*f0,'r-o');hold on;
% plot(x,exactf(x,time),'b--')
% hold on
% plot(x_node,exactf(x_node,time),'r-o')
%  max(abs(Meval*f0))
val = Meval*f0-exactf(x_node,time);


fL2 = 0; fLinf = max(abs(val));

ffval = Meval*f0;
for i = 1:num_plot
    fL2 = fL2 + quad_w(i)*h/2*sum(val(i:num_plot:end).^2);
end
[sqrt(fL2) fLinf]

figure;
plot(x_node,Meval*f0,'r-o',x_node,exactf(x_node,time),'r--','LineWidth',2);

figure;
plot(tp,'r-o'); hold on; plot(Lp,'b-o')
